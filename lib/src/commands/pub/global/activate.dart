/* Copyright (C) OnePub IP Pty Ltd - All Rights Reserved
 * licensed under the GPL v2.
 * Written by Brett Sutton <bsutton@onepub.dev>, Jan 2022
 */

import 'dart:io';

import 'package:args/command_runner.dart';
import 'package:dcli_terminal/dcli_terminal.dart';

import '../../../api/api.dart';
import '../../../exceptions.dart';
import '../../../onepub_settings.dart';
import '../../../util/one_pub_token_store.dart';

/// Imports a the onepub token generated by the onepub login process
/// and then addes it
class ActivateCommand extends Command<int> {
  ///
  ActivateCommand() : super();

  @override
  String get description =>
      blue("Make a private package's executables globally available.");

  @override
  String get name => 'activate';

  // GlobalPackages? _globals;
  // @override
  // // ignore: overridden_fields
  // late final SystemCache cache = SystemCache();

  // @override
  // GlobalPackages get globals => _globals ??= GlobalPackages(cache);

  // late Iterable<String> args = argResults.rest;

  // @override
//   Future<void> runProtected() async {
//     if (!await OnePubTokenStore().isLoggedIn(OnePubSettings.use().onepubApiUrl)) {
//       throw ExitException(exitCode: 1, message: '''
// You must be logged in to run this command.
// run: onepub login
//   ''');
//     }

//     final onepubApiUrl = OnePubSettings.use().onepubApiUrlAsString;

//     final package = readArg('Please provide a package name to activate');

//     PackageRef ref;
//     try {
//       ref = cache.hosted.refFor(package, url: onepubApiUrl);
//     } on FormatException catch (e) {
//       usageException('Invalid OnePub Url: $e');
//     }

//     // Parse the version constraint, if there is one.
//     var constraint = VersionConstraint.any;
//     if (args.isNotEmpty) {
//       try {
//         constraint = VersionConstraint.parse(readArg());
//       } on FormatException catch (error) {
//         usageException(error.message);
//       }
//     }

//     await API().checkVersion();
//     return globals.activateHosted(
//       ref.withConstraint(constraint),
//       null, // all executables
//       overwriteBinStubs: true,
//     );

//     // print('${blue('Successfully activated into $organisationName.')}');
//   }

//   String readArg([String error = '']) {
//     if (args.isEmpty) {
//       usageException(error);
//     }
//     final arg = args.first;
//     args = args.skip(1);
//     return arg;
//   }

  @override
  Future<int> run() async {
    // cache.setDefault
    await API().checkVersion();
    return activate();
  }

  Future<int> activate() async {
    if (!await OnePubTokenStore()
        .isLoggedIn(OnePubSettings.use().onepubApiUrl)) {
      throw ExitException(exitCode: 1, message: '''
You must be logged in to run this command.
run: onepub login
  ''');
    }

    final onePubUrl = OnePubSettings.use().onepubApiUrlAsString;

    final r = await Process.run('dart', [
      'pub',
      'global',
      'activate',
      '--hosted-url',
      onePubUrl,
      ...(argResults!.rest)
    ]);
    stdout.write(r.stdout);
    stderr.write(r.stderr);
    return r.exitCode;
  }
}
